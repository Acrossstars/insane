{{- for item in Usings }}using {{ item }};
{{- end }}

namespace {{ Namespace }};

public class {{ ClassName }} : {{- for item in BaseEntities }}{{ item }}{{ if ! for.last }}, {{ end }}{{- end }}
{
    {{- for field in PrivateFields }}
        private readonly {{ field.type }} {{ field.name }};
    {{- end }}
    
    public {{ ClassName }}({{ for par in InjectedInfrastructure }}
        {{ par.type }} {{ par.name }}{{ if ! for.last }},{{ end }}{{- end }})
    :base({{ for par in BaseConstructor }}{{ par }}{{ if !for.last}},{{ end -}}{{- end }})
    {
        {{ for prop in InjectedProperties }}
        {{ prop.destination }} = {{ prop.source }};
        {{ end }}
    }

    {{ for prop in Properties }} 
    {{ prop.modificator }} {{ prop.type }} {{ prop.name }} { {{ for state in prop.accessors }} {{ state }}; {{- end }} }
    {{- end }}

    public async Task<{{ QueryReturnType }}> Handle({{ for par in InjectedRequestClass }}
        {{ par.type }} request {{ if !for.last }},{{ end -}}{{- end }}, CancellationToken cancellationToken)
    {
        
        {{- for item in Steps }}
        //step: {{ item }};
        {{- end }}

       // Conditional inclusion of operation-specific logic
        {{ if OperationType == 'Read' }}
            {{ include 'QueryRequestGetLogicTextTemplate' }}
        {{ else if OperationType == 'None'}}
        {{ else }}
        {{ end }}
    }
}