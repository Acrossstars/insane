{{- for item in Usings }}using {{ item }};
{{- end }}

namespace {{ Namespace }};

public class {{ ClassName }} : {{- for item in BaseEntities  }}{{ item }}{{ if ! for.last }}, {{ end }}{{- end }}
{
    private {{ ClassName }}() {}

    private {{ ClassName }}({{ for par in Constructor  }}{{ par.type }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }})
    {
        SetId(Guid.NewGuid().ToString());

        {{ for prop in InjectedProperties  }}
        {{ prop.destination }} = {{ prop.source }};{{ end }}

        //CheckPolicies({{ ClassName }}ValidatorService);

        //AddDomainEvent(new {{ EntityNameCreatedEvent  }}({{ for par in EntityNameCreatedEventConstructor  }}{{ par.type }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }}));
    }

    {{ for prop in Properties  }} 
    {{ prop.modificator }} {{ prop.type }} {{ prop.name }} { {{ for state in prop.accessors }} {{ state }}; {{- end }} }
    {{- end }}

    public static {{ ClassName }} Create({{ for par in CreateParameters  }}{{ par.type }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }})
    {
        return new {{ ClassName }}({{ for par in CreateParameters }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }});
    }

    public void Update{{ ClassName }}({{ for par in UpdateParameters  }}{{ par.type }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }})
    {
        {{ for prop in UpdateParameters  }}
        {{ prop.destination }} = {{ prop.source }};{{ end }}

        //CheckPolicies();

        //AddDomainEvent(new {{ ClassName }}UpdatedEvent({{ for par in UpdateParameters }} {{ par.name }}{{ if ! for.last }}, {{ end }}{{- end }}));
    }

    protected override void CheckInvariants()
    {
    }

    #endregion

}