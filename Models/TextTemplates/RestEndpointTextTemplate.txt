{{- for item in Usings }}using {{ item }};{{- end }}

namespace {{ Namespace }};

[Tags({{ Tags }})]
[Route({{ Tags }})]
public class {{ ClassName }} : {{- for item in BaseEntities }}{{ item }}{{ if ! for.last }}, {{ end }}{{- end }}
{
    public {{ ClassName }}({{ for par in InjectedInfrastructure }}
        {{ par.type }} {{ par.name }}{{ if ! for.last }},{{ end }}{{- end }}
        )
    :base({{ for par in BaseConstructor }}{{ par }}{{ if !for.last}},{{ end -}}{{- end }})
    {
        {{ for prop in InjectedProperties }}
        {{ prop.destination }} = {{ prop.source }};
        {{ end }}
    }

    [Http{{ HttpMethod }}]
    [Route({{ Route }})]
    public async Task<Result<{{ MethodReturnType }}>> {{ HttpMethod }}([FromBody] {{ InputType }} input)
    {
        return await _inMemoryBus.Send{{ InMemoryBusMethod }}(
            new {{ RequestType }}({{ for prop in InputProperties }}{{ prop.destination }}: input.{{ prop.source }}{{ if ! for.last }},{{ end }}{{ end }})
            );
    }
}