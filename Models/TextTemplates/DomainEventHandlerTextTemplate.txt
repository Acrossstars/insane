{{- for item in Usings }}using {{ item }};
{{- end }}

namespace {{ Namespace }};

public class {{ ClassName }} : {{- for item in BaseEntities }}{{ item }}{{ if ! for.last }}, {{ end }}{{- end }}
{
    {{ for par in PrivateFields }}
    {{ par.type }} {{ par.name }}{{ if ! for.last }}{{ end }}{{- end }};

    public {{ ClassName }}(
        {{ for par in Constructor }}
        {{ par.type }} {{ par.name }}{{ if ! for.last }},{{ end }}{{- end }}
        {{ for par in InjectedInfrastructure }}
        {{ par.type }} {{ par.name }}{{ if ! for.last }},{{ end }}{{- end }})
    {
        {{ for prop in InjectedProperties }}
        {{ prop.destination }} = {{ prop.source }};
        {{ end }}
    }

    public async Task Handle({{ EventClassName }} @event, CancellationToken cancellationToken)
    {
        _logger.Information("{{ EventClassName }} Id: {Id}", @event.EntityId);
        await Task.CompletedTask;
    }
}